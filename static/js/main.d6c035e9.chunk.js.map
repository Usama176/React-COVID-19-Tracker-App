{"version":3,"sources":["components/InfoBox.js","components/LineGraph.js","components/Table.js","components/AppUtilities.js","components/MapUtilities.js","components/Map.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","gutterBottom","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","Table","countries","map","country","key","style","sortData","sortedData","sort","b","changeStatFormat","stat","ChangeView","center","zoom","useMap","flyTo","duration","casesTypeColors","hex","multiplier","recovered","deaths","Map","TileLayer","url","attribution","Circle","countryInfo","lat","long","pathOptions","fillColor","fillOpacity","Math","sqrt","Popup","backgroundImage","flag","showDataOnMap","App","setCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d6c035e9.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport \"../components_css/InfoBox.css\";\n\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\n\n  return (\n    <Card\n      onClick={props.onClick}\n      // if active then add infoBox--selected and if it contain isRed prop add infoBox--red\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      }`}\n    >\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n         <h4 className= \"infoBox__title\" >{title}</h4>\n        </Typography>\n        \n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}\n        </h2>\n\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\n// customizing the graph\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n// making chartData\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        // removing lastDataPoint form newDatapoint in order to today's data\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType, ...props }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      // fetch data from api for last 190 days the days can be changed\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=190\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className= {props.className}>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React from \"react\";\nimport \"../components_css/Table.css\";\nimport numeral from \"numeral\";\n\n// table contains all countries cases\nfunction Table({ countries }) {\n  return (\n    <div className= \"table\">\n      {countries.map((country) => (\n        <tr>\n          <td key={country.key} >{ country.country }</td>\n          <td style={{ color:\"#cc1034\" }} >\n            <strong>{ numeral(country.cases).format(\"0,0\") }</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n};\n\nexport default Table;\n","import numeral from 'numeral';\n\n// sorting the data acccording to the number of cases\nexport const sortData = (data) => {\n    let sortedData = [...data];\n    sortedData.sort((a, b) => {\n      if (a.cases > b.cases) {\n        return -1;\n      } else {\n        return 1;\n      }\n    });\n    return sortedData;\n  };\n\n// changing the format eg 10000 to 10k using numeral js\nexport const changeStatFormat = (stat) =>\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup, useMap } from \"react-leaflet\";\n\n// this function will change the center and zoom of the map based on the country selected\nexport function ChangeView({ center, zoom }) {\n    const map = useMap();\n    map.flyTo(center,zoom,{\n      duration: 2,\n  })\n  return null;\n};\n\n// for circle styling based on the casesType\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    multiplier: 300,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    multiplier: 350,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    multiplier: 400,\n  },\n};\n\nexport const showDataOnMap = (data, casesType) => {\n\n  return (data.map((country) => (\n    // circles on the map based on the casesType\n    <Circle\n      key={country.key}\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      pathOptions={{\n        color: casesTypeColors[casesType].hex,\n        fillColor: casesTypeColors[casesType].hex \n      }}\n      fillOpacity={0.3}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      {/* on click the popup appear on the circle containing all the information */}\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0.00a\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0.00a\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0.00a\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  )))\n};","import React from \"react\";\nimport { MapContainer as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"../components_css/Map.css\";\nimport { ChangeView, showDataOnMap } from \"./MapUtilities\";\n\n// using react-leaflet map\n\nfunction Map({ countries, casesType, center, zoom }) {\n\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n\n        {/* changeView set the map center whenever the state changes */}\n        <ChangeView casesType={casesType} center={center} zoom={zoom} />\n        <TileLayer \n          url = 'https://tiles.stadiamaps.com/tiles/osm_bright/{z}/{x}/{y}{r}.png'\n          attribution = '&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./components/InfoBox\";\nimport LineGraph from \"./components/LineGraph\";\nimport Table from \"./components/Table\";\nimport { sortData, changeStatFormat } from \"./components/AppUtilities\";\nimport Map from \"./components/Map\";\nimport \"leaflet/dist/leaflet.css\";\n\n// project url https://covid-19-tracker-820ec.web.app\n\nconst App = () => {\n  \n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -95.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  // api url \"https://disease.sh/v3/covid-19/all\"\n  // fetch worldwide/all the data from api then passing to countryInfo\n  // initially this data will appear before selecting a specific country\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n// api for all countries \"https://disease.sh/v3/covid-19/countries\"\n// fetch all the data from api for all the countries\n// and using in MenuItem and passing to the Map component and Table component\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n    await fetch(\"https://disease.sh/v3/covid-19/countries\")\n          .then((response) => response.json())\n          .then((data) => {\n            // get name and value from countries data\n            const countries = data.map((country) => ({\n              name: country.country,\n              value: country.countryInfo.iso2,\n            }));\n            // passing all the data to sortData function imported from AppUtilities.js\n            let sortedData = sortData(data);\n            setTableData(sortedData);\n            // pass countries to MenuItem\n            setCountries(countries);\n            // pass data to Map component\n            setMapCountries(data);\n          });\n    };\n    // function called\n    getCountriesData();\n  }, []);\n\n// whenever the user changes the country this function will be called\n  const onCountryChange = async (e) => {\n    // get country code eg PK for pakistan\n    const countryCode = e.target.value;\n    const url = countryCode === \"worldwide\"\n        // if the user choose worldwide\n        ? \"https://disease.sh/v3/covid-19/all\"\n        // if the user selct a specific country\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n          .then((response) => response.json())\n          .then((data) => {\n            // pass country code to the value of select\n            setCountry(countryCode);\n            setCountryInfo(data);\n            { \n              // set map center and zoom if user select worldwide\n              if (url === \"https://disease.sh/v3/covid-19/all\") {\n              setMapCenter([34.80746, 30.4796])\n              setMapZoom(2)\n              } else {\n                // set map center to the selected country\n                 setMapCenter([data.countryInfo.lat, data.countryInfo.long])\n                 setMapZoom(5)\n                };\n            }\n\n          });\n  };\n\n  return (\n\n    <div className=\"app\">\n\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              className='app__dropdownSelect'\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem key={country.key} value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        {/* Info Boxes and Map container */}\n\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={changeStatFormat(countryInfo.todayCases)}\n            total={changeStatFormat(countryInfo.cases)}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={changeStatFormat(countryInfo.todayRecovered)}\n            total={changeStatFormat(countryInfo.recovered)}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={changeStatFormat(countryInfo.todayDeaths)}\n            total={changeStatFormat(countryInfo.deaths)}\n          />\n        </div>\n        {/* Map component */}\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n\n      {/* Table and Graph container */}\n\n      <Card className=\"app__right\">\n        <CardContent >\n          <div className=\"app__information\">\n            {/* Table component */}\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n\n            {/* Graph component */}\n            <h3 className=\"app__graphTitle\" >Worldwide new {casesType}</h3>\n            <LineGraph className=\"app__lineGraph\" casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}